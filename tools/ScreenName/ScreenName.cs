using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using Helper;

namespace ScreenName
{
    class ScreenName
    {

        const string attrSreenName = "autoGeneratedScreenName";
        private static string skinFileName = null;
        private static string screenNameElement = null;
        private static string screenFilesPath = null;
        private static XElement configScreenElement = null;

        static void Main(string[] args)
        {
            Console.BufferHeight = 500;

            showOptions();

            //Console.Clear();

            Console.Write("\n\n\nPress any key to exit");
            Console.ReadKey();
        }

        private static void showOptions()
        {
            Console.Write("(1) Write or overwrite screen names to 'skin.xml'\n");
            Console.Write("(2) Remove screen names from 'skin.xml'\n");
            Console.Write("(3) Show settings from 'screenName.config'\n");
            Console.Write("----------------------------------------------------\n");
            Console.Write("-> ");

            ConsoleKey response = Console.ReadKey(false).Key;

            switch (response)
            {
                case ConsoleKey.D1:
                    writeScreenNames();
                    break;
                case ConsoleKey.D2:
                    Console.Write("\n");
                    removeScreenNames();
                    break;
                case ConsoleKey.D3:
                    Console.Write("\n");
                    showSettings();
                    break;
            }
        }

        private static bool loadSetting(bool showLog)
        {
            Settings settings = null;
            try
            {
                settings = Settings.Load();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write("\n\nError: could not read config from 'screenName.config'\n");
                Console.Write("Error: {0}\n", ex.Message);
                Console.ResetColor();
                Console.Write("\n\nPress any key to exit");
                Console.ReadKey();
                Environment.Exit(0);
            }

            skinFileName = settings.SkinPath + "skin.xml";
            screenNameElement = settings.ScreenNameElementMetrixReloaded;
            screenFilesPath = settings.ScreenFilesPath;

            Console.WriteLine(skinFileName);

            if (showLog)
            {
                settings.LogSettings();
            }

            if (File.Exists(skinFileName))
            {
                if (parseScreenElementString())
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write("\n\nError: skin file not found at '{0}'!", skinFileName);
                Console.ResetColor();
                Console.Write("\n\nPress any key to exit");
                Console.ReadKey();
                Environment.Exit(0);
            }
            return false;
        }

        private static void showSettings()
        {
            if (loadSetting(true))
            {
                Console.Write("\nPress any key to return");
                Console.ReadKey();

                Console.Clear();
                showOptions();
            }
        }

        private static bool parseScreenElementString()
        {
            try
            {
                // screenElement aus Config parsen
                configScreenElement = XElement.Parse(screenNameElement);

                return true;
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write("Error: could not parse screenElement from 'screenName.config'\n");
                Console.Write("Error: {0}\n", ex.Message);
                Console.ResetColor();
                return false;
            }
        }

        private static void writeScreenNames()
        {
            Console.WriteLine();
            Console.WriteLine();

            if (loadSetting(false))
            {
                System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(screenFilesPath);

                FileInfo[] fileList = directory.GetFiles();

                foreach (System.IO.FileInfo file in fileList)
                {
                    XDocument xdoc = XDocument.Load(file.FullName);

                    XElement element = xdoc.Element("screen");

                    //foreach (var element in xdoc.Root.Elements())
                    //{

                    try
                    {
                        if (element != null && element.Name == "screen")
                        {
                            string screenName = element.Attribute("name").Value;

                            XElement screenElement = new XElement("widget");

                            // Name des Screens schreiben
                            screenElement.SetAttributeValue("text", screenName);

                            //// Attribut Name schreiben
                            //screenElement.SetAttributeValue("name", attrSreenName);

                            //Daten aus Config holen, direkt übergabe nicht möglich wegen global
                            getConfigAttributes(screenElement);

                            // Screen Element Size auslesen
                            List<String> screenElementSizes = screenElement.Attribute("size").Value.Split(',').ToList();

                            // Screen Size auslesen
                            List<String> screenSizes = element.Attribute("size").Value.Split(',').ToList();

                            // Position des ScreenElement berechnen
                            int posX = Convert.ToInt32(screenSizes[0]) - Convert.ToInt32(screenElementSizes[0]);
                            int posY = Convert.ToInt32(screenSizes[1]) - Convert.ToInt32(screenElementSizes[1]);

                            if (posX >= 0 && posY >= 0)
                            {
                                // Position des ScreenElement setzen
                                screenElement.SetAttributeValue("position", String.Format("{0},{1}", Convert.ToString(posX), Convert.ToString(posY)));

                                //Prüfen ob schon vorhanden, wenn ja überschreiben
                                bool overWrite = removeScreenElement(element);

                                if (!overWrite)
                                {
                                    Console.Write(String.Format("Screen '{0}': writing screenName element\n", element.Attribute("name").Value));
                                }
                                else
                                {
                                    Console.ForegroundColor = ConsoleColor.DarkYellow;
                                    Console.Write(String.Format("Screen '{0}': overwriting existing screenName element\n", screenName));
                                    Console.ResetColor();
                                }
                                element.Add(screenElement);
                            }
                            else
                            {
                                //PosX & PosY ist negativ
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.Write(String.Format("Screen '{0}': screenName not added because position = {1},{2} is negativ!\n", screenName, Convert.ToString(posX), Convert.ToString(posY)));
                                Console.ResetColor();
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine();
                        Console.WriteLine();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("Error: {0}\n", ex.Message);
                        Console.Write("Error: {0}\n", ex.StackTrace);
                        Console.ResetColor();
                        Console.WriteLine();
                        Console.Write("Press any key to exit");
                        Console.ReadKey();
                    }
                    //}

                    XmlWriterSettings settings = new XmlWriterSettings
                    {
                        Indent = true,
                        OmitXmlDeclaration = true
                    };

                    using (XmlWriter writer = XmlWriter.Create(file.FullName, settings))
                    {
                        xdoc.Save(writer);
                    }
                }
            }
        }

        private static void removeScreenNames()
        {
            Console.WriteLine();
            Console.WriteLine();

            if (loadSetting(false))
            {
                System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(screenFilesPath);

                FileInfo[] fileList = directory.GetFiles();

                foreach (System.IO.FileInfo file in fileList)
                {
                    if (file.Name.Contains(".xml") & !file.Name.Equals("skin.xml"))
                    {
                        Console.WriteLine(file.FullName);
                        XDocument xdoc = XDocument.Load(file.FullName);

                        XElement element = xdoc.Element("screen");

                        //foreach (var element in xdoc.Root.Elements())
                        //{                            
                        try
                        {
                            if (element.Name == "screen")
                            {
                                string screenName = element.Attribute("name").Value;

                                //vorhande Elemente löschen
                                bool elementDeleted = removeScreenElement(element);

                                if (elementDeleted)
                                {
                                    Console.Write(String.Format("Screen '{0}': removing screenName element\n", screenName));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine();
                            Console.WriteLine();
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Write("Error: {0}\n", ex.Message);
                            Console.Write("Error: {0}\n", ex.StackTrace);
                            Console.ResetColor();
                            Console.WriteLine();
                            Console.Write("Press any key to exit");
                            Console.ReadKey();
                        }
                        //}

                        XmlWriterSettings settings = new XmlWriterSettings
                        {
                            Indent = true,
                            OmitXmlDeclaration = true
                        };

                        using (XmlWriter writer = XmlWriter.Create(file.FullName, settings))
                        {
                            xdoc.Save(writer);
                        }
                    }
                }
            }
        }

        private static bool removeScreenElement(XElement element)
        {
            IEnumerable<XElement> result = from el in element.Elements("eLabel") where (string)el.Attribute("name") == attrSreenName select el;

            foreach (XElement el in result)
            {
                el.Remove();
                return true;
            }
            return false;
        }

        private static void getConfigAttributes(XElement screenElement)
        {
            foreach (var attr in configScreenElement.Attributes())
            {
                screenElement.SetAttributeValue(attr.Name, attr.Value);
            }
        }
    }
}
